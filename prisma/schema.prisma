// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // for mongo db
  name      String?
  email     String?   @unique
  emailVerified DateTime?
  image     String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoriteIds String[] @db.ObjectId

  accounts Account[]
  listings Listing[]
  reservations Reservation[]

}

model Account{
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // for mongo db
  userId    String?   @db.ObjectId
  type      String?
  provider  String?
  providerAccountId String?
  refreshToken String?
  accessToken String?
  expiresAt Int?
  tokenType String?
  scope String?
  idToken String? @db.String
  sessionState String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade) 

  @@unique([provider, providerAccountId])

}

model Listing {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // for mongo db
  title     String?
  description String?
  imageSrc     String?
  category String?
  roomCount Int?
  bathroomCount Int?
  guestCount Int?
  locationValue String?
  userId    String?   @db.ObjectId
  price     Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
}

model Reservation{
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // for mongo db
  listingId String? @db.ObjectId
  userId    String?   @db.ObjectId
  startDate DateTime?
  endDate DateTime?
  totalPrice Int?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listing Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}